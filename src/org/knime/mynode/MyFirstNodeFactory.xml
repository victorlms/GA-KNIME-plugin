<?xml version="1.0" encoding="UTF-8"?>
<knimeNode  icon="./default.png" type="Manipulator"  xmlns="http://knime.org/node/v2.12" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://knime.org/node/v2.12 http://knime.org/node/v2.12.xsd">
    
    <name>Genetic Algorithm</name>
    
    <shortDescription>
        Node will execute a generic Genetic Algorithm
    </shortDescription>
    
    <fullDescription>
        <intro>Genetic Algorithm</intro>
        
        
        <option name="short name of first option (like in the dialog)">description of first option</option>
        <option name="short name of second option (like in the dialog)">description of second option</option>
        <!-- possibly more options that can also be grouped by tabs -->
        <!--
        <tab name="Standard Options">
            <option name="short name of first option (like in the dialog)">description of first option</option>
            <option name="short name of second option (like in the dialog)">description of second option</option>
        </tab>
        <tab name="Advanced Options">
            <option name="short name of first advanced option (like in the dialog)">description of first advanced option</option>
        </tab>
        -->
    </fullDescription>
    
    <ports>
        <inPort index="0" name="Evaluation Function">Python script with the Evaluation Function in it</inPort>
        <!-- possibly more input ports here-->
        <outPort index="0" name="Best individual">The best individual</outPort>
        <!-- possibly more output ports here-->
    </ports>    
    <views>
        <view index="0" name="Instructions for the evaluation function">
			The evaluation function must be codded in python.<br/>
			And since it will be executed by a Java code there are some rules you should follow:<br/>
			- The parameter used for the individual that is going to be evaluated is <b>sys.arg[1]</b>, whic will be a string.<br/> 
			- Manipulate as you wish but make sure to return with <b>sys.stdout.write(foo)</b>, where foo is a string  of bits like <b>"010101"</b><br/>
			<br/><b>Here's an example:</b><br/>
			import sys<br/>
			sys.stdout.write(sys.argv[1])        
		</view>
    </views>
</knimeNode>
